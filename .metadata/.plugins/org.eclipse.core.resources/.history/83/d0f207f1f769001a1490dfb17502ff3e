package generic;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Constants {
	
public WebDriver driver;
	
	public Constants(WebDriver driver)
	{
		this.driver=driver;
		PageFactory.initElements(driver, this);
		
	}
	
	public void dismiss() {
		driver.switchTo().alert().dismiss();
	}
	
	public void accept() {
		driver.switchTo().alert().accept();
	}
	
	public void mousemove() {
		Actions builder = new Actions(driver);
		Action action = builder.doubleClick().build();
		action.perform();
	}
	
	@FindBy(xpath="/html/body/div[1]/div/div/div/div[1]/div[1]/img")
	WebElement cityPopup;

	//ExplicitWait
	public void WaitExplicitly()		{
			WebDriverWait wait=new WebDriverWait(driver, 60);
			wait.until(ExpectedConditions.visibilityOf(cityPopup));
			
		}

	public void WaitImplicitly() {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		
	}
	
	//SelectByIndex
	public void SelectDDLByIndex(WebElement ddl,int index )	{
			Select sel=new Select(ddl);
			sel.selectByIndex(index);
		}
		
		//SelectByValue
	public void SelectDDLByValue(WebElement ddl,String value ){
			Select sel=new Select(ddl);
			sel.selectByValue(value);
		}
	
	public void selectText(WebElement ddl,String value) {
		Select sel = new Select(ddl);
		sel.selectByVisibleText(value);
	}
	public void quit() {
		driver.quit();
	}
	
}
